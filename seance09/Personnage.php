<?php

abstract class Personnage implements iPersonnage
{

    protected $typePersonnage;
    protected $nbPtDeVie;
    protected $nbPtDeForce;
    protected $x;
    protected $y;
    static $nbPersonnages;
    protected $attributs = [];

    /**
     * @param $typePersonnage
     * @param $nbPtDeVie
     * @param $nbPtDeForce
     * @param $x
     * @param $y
     * @param array $attributs
     */
    public function __construct($typePersonnage, $nbPtDeVie, $nbPtDeForce)
    {
        $this->typePersonnage = $typePersonnage;
        $this->nbPtDeVie = $nbPtDeVie;
        $this->nbPtDeForce = $nbPtDeForce;
    }

    /**
     * @return mixed
     */
    public function getX()
    {
        return $this->x;
    }

    /**
     * @return mixed
     */
    public function getY()
    {
        return $this->y;
    }

    public function place($x, $y){
        $this->x = $x;
        $this->y = $y;
    }
    public function deplaceX($x = 1){
        $this->x += $x;
    }
    public function deplaceY($y = 1){
        $this->y += $y;
    }
    public function affichePersonnage(){
        return 'Le type du personnage est '.$this->typePersonnage.', son nombre de points de vie : '.$this->nbPtDeVie.' et son nombre de points de force : '.$this->nbPtDeForce;
    }
    public function addAttribut($attributs){
        $this->attributs[] = $attributs;
    }
    public function afficherAttributs(){
        foreach ($this->attributs as $attribut){
            return $attribut->affiche();
        }
    }
}

class Humain extends Personnage {

    private $nbArmes;
    private $nbProtections;

    public function __construct()
    {
        parent::__construct('Humain', 100, 100);
    }

    public function addAttribut($attributs)
    {
        if ($attributs instanceof Arme && $this->nbArmes<2)
        {
            parent::addAttribut($attributs); // TODO: Change the autogenerated stub
        } elseif($attributs instanceof Protection && $this->nbProtections<1) {
            parent::addAttribut($attributs); // TODO: Change the autogenerated stub
        } else {
            echo 'L\'Humain n\'accepte que les attributs de type Armes et Protection, il est également possible que les capacités de possesions de l\'humain soient atteintes !';
        }
    }
}

class Elfe extends Personnage {

    public function __construct()
    {
        parent::__construct('Elfe', 120, 80);
    }

    public function addAttribut($attributs)
    {
        if ($attributs instanceof Magie)
        {
            parent::addAttribut($attributs); // TODO: Change the autogenerated stub
        } else {
            echo 'Uniquement des attributs de magie sont possible';
        }
    }
}

class Gobelin extends Personnage {

    private $nbArmes;
    private $nbProtections;

    public function __construct()
    {
        parent::__construct('Gobelin', 80, 120);
    }

    public function addAttribut($attributs)
    {
        if ($attributs instanceof Arme && $this->nbArmes<1)
        {
            parent::addAttribut($attributs); // TODO: Change the autogenerated stub
        } elseif($attributs instanceof Protection && $this->nbProtections<1) {
            parent::addAttribut($attributs); // TODO: Change the autogenerated stub
        } else {
            echo 'Le Gobelin n\'accepte que les attributs de type Armes et Protection, il est également possible que les capacités de possesions du gobelin soient atteintes !';
        }
    }
}
